import pyglet
from pyglet import window
from random import *


# Step 1
def make_empty_ms_grid(n):
    dictionary = {"content": None, "State": "hidden"}
    grid = [[dictionary] * n for liste in range(n)]
    return grid

# Step 2
# grid = [["â– "] * n for liste in range(n)]
# line_size = 50

# window = pyglet.window.Window(
#     len(grid) * line_size, len(grid) * line_size, "Demineur")


# @window.event()
# def on_draw():
#     for i, v_line in enumerate(grid):
#         for j, v_col in enumerate(v_line):
#             pyglet.text.Label(v_col, x=(len(grid) - j - 0.5) * line_size, y=(
#                 len(grid) - i - 0.5) * line_size, anchor_x="center",
#                 anchor_y="center").draw()


# Step 3
def make_bomb_in_grid(n):
    grid = make_empty_ms_grid(n)
# gÃ©nÃ¨re une grille qui affiche des bombes au hasard:
    liste_bomb = []
    grid_bomb = []
    for line in grid:
        for element in line:
            for key, value in element.items():
                if key == "content":
                    value_choice = choice(({"content": None,
                                            "State": "hidden"},
                                           {"content": "ğŸ’£",
                                            "State": "hidden"}))
        liste_bomb.append(value_choice)
        grid_bomb.append(liste_bomb)

    return grid_bomb

# parcourir cette grille et trouver les positions des bombes bombe[i][j]


def bomb_in_grid(n):
    bomb_position = []
    grid = make_bomb_in_grid(n)
    for i, line in enumerate(grid):  # horizontal
        for j in range(0, len(line)):  # vertical
            if grid[i][j] == {'content': 'ğŸ’£', 'State': 'hidden'}:
                bomb_position.append([i, j])

    return bomb_position

# fonctionne pour limiter le nombre de bombe


def limit_bombs_in_grid(n):
    bomb_location = bomb_in_grid(n)
# choix alÃ©atoire de la position de la bombe, k=n+1 -> nombres de bombes + une
    if n <= len(bomb_location):
        limite_bombs = choices(bomb_location, k=n+1)
    else:
        bomb_location = bomb_in_grid(n)
        if n <= len(bomb_location):
            limite_bombs = choices(bomb_location, k=n+1)

    return limite_bombs

# numÃ©ros = nombres de bombes autour


def numbers_around_bombs(n):
    grid = [[0] * n for liste in range(n)]
    bombs = limit_bombs_in_grid(n)
# boucle pour attraper la position des bombes
    for position in bombs:
        # rangÃ©es et colonnes
        (bomb_row, bomb_col) = position
        grid[bomb_row][bomb_col] = "ğŸ’£"
# regarde autour si il y a une bombe -1 Ã  gauche en ligne, +2 Ã  droite en ligne
        row_range = range(bomb_row - 1, bomb_row + 2)
# regarde autour si il y a une bombe -1 en haut en colonne, +2 en en colonne
        col_range = range(bomb_col - 1, bomb_col + 2)
# boucle element dans les lignes
        for i in row_range:
            # boucle element dans les colonnes
            for j in col_range:
                if (0 <= i < n) and (0 <= j < n and grid[i][j] != "ğŸ’£"):
                    grid[i][j] += 1

    return grid

# fonction pour gÃ©rer les clic des user
# step 4
# grid = numbers_around_bombs(9)
# # print(grid)
# @window.event
# def on_mouse_release(x, y, button, modifiers):
#     for i, v_line in enumerate(grid):
#         for j, v_col in enumerate(v_line):
#             v = v_col
#     if v == x:
#         print("you win")
#     elif button == 1 and v == "ğŸ’£":
#         print("You loose")
#     elif button == 1 and v == "0":
#         v = x # case vide
#         print("affiche les cases autour qui sont Ã  0")
#     elif button == 1 and v != "ğŸ’£" and v != "0":
#         v = x # les bombes qui a autour
#         print(v, "affiche le numÃ©ro qui correspond aux bombes autour")
#     else:
#         print("ğŸš©")


# line_size = 20
# window = pyglet.window.Window(len(grid)line_size,
# len(grid)line_size, "Demineur", resizable=True)
# window.set_minimum_size(len(grid)line_size, len(grid)line_size)
# background = pyglet.resource.image("desert.jpg")
# icon = pyglet.image.load("minesweeper.png")
# window.set_icon(icon)

# sound = pyglet.resource.media("Sevilla.mp3", streaming=False)
# window.push_handler(pyglet.window.event.WindowEventLogger())

# @window.event()
# def on_draw():
#     window.clear()
#     # background.blit(0, 0)
#     for i, v_line in enumerate(grid):
#         for j, v_col in enumerate(v_line):
#             if v_col == -1:
#                 v_col = "-1"
#             else:
#                 v_col = "0"
#             pyglet.text.Label(v_col,
# x=(len(grid) - j - 0.5) * line_size,
# y=(
#             len(grid) - i - 0.5) * line_size,
# anchor_x="center",
# anchor_y="center").draw()
    # sound.play()

# pyglet.app.run()
